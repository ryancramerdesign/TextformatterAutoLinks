<?php namespace ProcessWire;

/**
 * ProcessWire Autolinks Textformatter
 *
 * Copyright (C) 2014-2024 by Ryan Cramer 
 * http://processwire.com
 * License: MPL 2.0
 *
 * @property array $terms Associative array of term => URL
 * @property array $xterms Non-associative array of excluded terms
 * @property int $termLimit Max number of times to link a term in a block of copy
 * @property int $maxLinks Max number of linked terms allowed in a block of copy
 * @property int $distance Distance between the same tags
 * @property string $allowTags Tags that we're allowed to produce links within (blank=any)
 * @property string $linkMarkup Internal link markup
 * @property string $linkMarkupExt External link markup
 * 
 *
 */

class TextformatterAutoLinks extends Textformatter implements ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' => 'Auto Links',
			'summary' => 'Automatically links any of the configured text phrases to a URL, any time they appear.', 
			'version' => 8, 
			'url' => "https://processwire.com/modules/textformatter-auto-links/", 
		); 
	}

	/**
	 * Default max number of times to link a term within the same field
	 *
	 */
	const defaultTermLimit = 5; 

	/**
	 * Default markup for internal links
	 *
	 */
	const defaultLinkMarkup = '<a href="{href}">{text}</a>'; 

	/**
	 * Default markup for external links
	 *
	 */
	const defaultLinkMarkupExt = '<a target="_blank" href="{href}">{text}</a>'; 

	/**
	 * Construct
	 * 
	 */
	public function __construct() {
		parent::__construct();
		$this->set('terms', []); // Associative array of term => URL
		$this->set('xterms', []); // Non-associative array of excluded terms
		$this->set('termLimit', self::defaultTermLimit); // max number of times to link a term in a block of copy
		$this->set('maxLinks', 20); // max number of linked terms allowed in a block of copy
		$this->set('distance', 100); // distance between the same tags
		$this->set('allowTags', ''); // tags that we're allowed to produce links within (blank=any)
		$this->set('linkMarkup', self::defaultLinkMarkup); // internal link markup
		$this->set('linkMarkupExt', self::defaultLinkMarkupExt);// external link markup 
	}
	
	public function wired() {
		parent::wired();
		$languages = $this->wire()->languages;
		if($languages) {
			// terms for other languages
			foreach($languages as $language) {
				if(!$language->isDefault()) $this->set("terms$language->id", []); 
			}
		}
	}

	/**
	 * Initialize the Textformatter
	 *
	 */
	public function init() {
		// pick up terms defined in $config variable, optional
		$terms = $this->wire()->config->get('TextformatterAutolinks');
		if(is_array($terms)) $this->terms = array_merge($terms, $this->terms); 
		if(!$this->linkMarkup) $this->linkMarkup = self::defaultLinkMarkup;
		if(!$this->linkMarkupExt) $this->linkMarkupExt = self::defaultLinkMarkupExt;
		parent::init();
	}

	/**
	 * Populate autolinks
	 * 
	 * @param Page $page
	 * @param Field $field
	 * @param string $value
	 *
	 */
	public function formatValue(Page $page, Field $field, &$value) {

		if(!strlen("$value")) return; 
		
		$termLimit = $this->termLimit;
		if(!$termLimit) $termLimit = self::defaultTermLimit; 
		
		$config = $this->wire()->config;
		$languages = $this->wire()->languages;
		$rootURL = $config->urls->root; 
		
		/** @var Page $page */
		$page = $this->wire()->page; // page being viewed (which may be different from $page)
		$maxLinkedTerms = $this->maxLinks; 
		$numLinkedTerms = 0; 
		$terms = [];
		
		if($languages) {
			$language = $this->wire()->user->language;
			$terms = $this->get("terms$language->id");
		}
		
		if(empty($terms)) $terms = $this->terms;
		if(!is_array($terms)) $terms = $this->termsArray($terms);

		foreach($terms as $term => $url) {

			// avoid linking page if we are already on it
			if($url == $page->path() || $url == $page->id || $url == $_SERVER["REQUEST_URI"]) continue; 

			// make path-based URLs relative to root
			if(substr($url, 0, 1) == '/' && $rootURL != '/') $url = $rootURL . substr($url, 1); 

			// format the term
			if($this->formatTerm($value, $term, $url, $termLimit)) $numLinkedTerms++;
			
			// abort if we've gone over the max allowed links
			if($maxLinkedTerms > 0 && $numLinkedTerms >= $maxLinkedTerms) break;
		}
	}

	/**
	 * Check if $termPos exists within the boundaries (in $str) of an allowed tag
	 *
	 * @param string $str
	 * @param int $termPos
	 * @return bool
	 *
	 */
	protected function inAllowedTag(&$str, $termPos) {

		$in = false; 
		static $allowTags = array();

		if(!count($allowTags)) $allowTags = explode(' ', $this->allowTags); 
		
		foreach($allowTags as $tag) {
		
			$closePos = mb_stripos($str, "</$tag>", $termPos); 
			if($closePos === false) continue; // if no closing tag present, skip

			$startPos = mb_stripos($str, "<$tag>", $termPos); 
			if($startPos === false || $startPos > $closePos) {
				// start tag isn't here (meaning it comes before our term), or it comes sometime after
				// this is good, as it means our term is likely within an allowed tag, however, we 
				// need to double check now with an attribute version of the tag
				$startPos = mb_stripos($str, "<$tag ", $termPos); 
				if($startPos === false || $startPos > $closePos) {
					// if we made it here, then we are within an allowed tag
					$in = true; 
					break;
				}
			}
		}

		return $in;
	}

	/**
	 * Find and populate a single term
	 *
	 * @param string $str
	 * @param string $term
	 * @param string $url
	 * @param int $limit
	 * @return int Number of links generated by this method call
	 *
	 */
	protected function formatTerm(&$str, $term, $url, $limit) {
		
		$pages = $this->wire()->pages;
		$page = $this->wire()->page;

		$startPos = 0; 
		$cnt = 0; 
		$expand = substr($term, -1) == '*';
		if($expand) $term = rtrim($term, '*'); 
		$_term = $term;
		$_termLength = mb_strlen($term); 
		$n = 0;
		$maxN = 255;
		
		$distance = $this->distance;
		$xterms = $this->xterms;
		$allowTags = $this->allowTags;
		$linkMarkup = $this->linkMarkup;
		$linkMarkupExt = $this->linkMarkupExt;
		
		if(!is_array($xterms)) $xterms = explode("\n", $xterms);
		
		foreach($xterms as $key => $xterm) {
			$xterm = trim($xterm);
			if(!strlen($xterm)) {
				unset($xterms[$key]); 
			} else {
				$xterms[$key] = $xterm;
			}
		}

		do { 
			if($startPos && mb_strlen($str) <= $startPos) break;

			$term = $_term; // restore original
			$termLength = $_termLength; 

			$termPos = mb_stripos($str, $term, $startPos); 
			if($termPos === false) break; 
			$termEnd = $termPos + $termLength;
			$isExcludeTerm = false;
			
			foreach($xterms as $xterm) {
				if(mb_stripos($xterm, $term) === false) continue;
				$x1 = mb_stripos($str, $xterm, $startPos);
				if($x1 === false) continue;
				$x2 = $x1 + strlen($xterm); 
				if($termPos >= $x1 && $termEnd <= $x2) {
					$isExcludeTerm = true; 
				}
			}

			$startPos = $termEnd; 
			if($isExcludeTerm) continue;
			
			// determine if we are within an allowed tag
			if($allowTags && !$this->inAllowedTag($str, $termPos)) continue; 

			// determine if the block of text is already linked
			$closeLinkPos = mb_stripos($str, '</a>', $termPos); 
			if($closeLinkPos !== false) {
				// $str contains a closing link ahead, make sure it comes after an opening link
				$openLinkPos = mb_stripos($str, '<a ', $termPos); 
				if(!$openLinkPos || $openLinkPos > $closeLinkPos) {
					// term is already surrounded in a link
					continue; 
				}
			}

			// determine if we are in an attribute of another tag
			$endTagPos = mb_strpos($str, '>', $termPos); 
			if($endTagPos !== false) {
				$startTagPos = mb_strpos($str, '<', $termPos); 
				if(!$startTagPos || $startTagPos > $endTagPos) {
					// term may be within a tag, like an <img alt='...'>
					continue; 
				}
			}

			if(ctype_digit("$url")) {
				// URL specified as a page ID number
				$p = $pages->get((int) $url); 			
				if(!$p->id || $p->id == $page->id || !$p->viewable()) continue; 
				$url = $p->url;
			}

			$str1 = mb_substr($str, 0, $termPos); // part before the term
			$str2 = mb_substr($str, $startPos); // part after the term
			$term = mb_substr($str, $termPos, $termLength); // actual term in context

			// check to ensure that the term is a complete term and not a component of some other word
			$charBeforeTerm = mb_substr($str, $termPos-1, 1); 
			$charAfterTerm = mb_substr($str2, 0, 1); 

			$ok = 1;
			foreach(array($charBeforeTerm, $charAfterTerm) as $test) {
				if(!strlen($test) || ctype_space($test) || ctype_punct($test)) continue; // these are ok
				if(ctype_print($test) || ctype_alnum($test)) {
					$ok = $test === $charBeforeTerm ? 0 : -1; // identify which test failed (-1=after failed)
				}
				if($ok < 1) break;
			}

			// check if we should expand term to include additional text
			if($ok == -1 && $expand) do {
				$c = mb_substr($str2, 0, 1); 
				if(!strlen($c) || ctype_space($c) || ctype_punct($c)) break;
				$ok = 1; 
				$term .= $c;
				$str2 = mb_substr($str2, 1);
				$startPos++;
				$termLength++;
			} while(1);

			// if term is not ok, we'll skip it since it's a component of some other term
			if($ok > 0) {
				// insert the link
				$link = strpos($url, '://') !== false ? $linkMarkupExt : $linkMarkup; 
				$link = str_replace(array('{href}', '{text}'), array($url, $term), $link); 
				$str = $str1 . $link . $str2; 
				$startPos += (mb_strlen($link) - $termLength) + $distance;
				$cnt++;
			}


		} while($termPos > 0 && $cnt < $limit && ++$n <= $maxN); 

		return $cnt; 
	}

	/**
	 * Set configuration value, for ConfigurableModule interface
	 * 
	 * @param string $key
	 * @param mixed $value
	 * @return $this
	 *
	 */
	public function set($key, $value) {

		if(strpos($key, 'terms') === 0 && !is_array($value)) {
			// $terms or $terms1234 where 1234 is language ID
			$value = $this->termsArray($value);
		} else if($key === 'xterms' && !is_array($value)) {
			$a = [];
			foreach(explode("\n", $value) as $line) {
				$line = trim($line);
				if(strlen($line)) $a[] = $line;
			}
			$value = $a;
		} else if(in_array($key, [ 'maxLinks', 'termLimit', 'distance' ])) {
			$value = (int) $value;
		}
		return parent::set($key, $value);
	}

	/**
	 * Convert given string of terms to an array
	 * 
	 * @param $terms
	 * @return array
	 * 
	 */
	protected function termsArray($terms) {
		if(is_array($terms)) return $terms;
		$a = [];
		foreach(explode("\n", (string) $terms) as $line) {
			if(strpos($line, '=') === false) continue;
			list($term, $url) = explode('=', $line);
			$a[trim($term)] = trim($url);
		}
		return $a;
	}

	/**
	 * Get the terms property as a newline separated key=value string
	 * 
	 * @param $terms
	 * @return string
	 * 
	 */
	protected function termsString($terms) {
		if(!is_array($terms)) return (string) $terms;
		$a = [];
		foreach($terms as $term => $url) {
			$a[] = trim($term) . '=' . trim($url);
		}
		return implode("\n", $a);
	}

	/**
	 * Get Inputfields for configuration of the module
	 * 
	 * @param InputfieldWrapper $inputfields
	 *
	 */
	public function getModuleConfigInputfields(InputfieldWrapper $inputfields) {
		$modules = $this->wire()->modules;
		$languages = $this->wire()->languages;

		/** @var InputfieldTextarea $f */
		$f = $modules->get('InputfieldTextarea'); 		
		$f->attr('name', 'terms');
		$f->label = $this->_('Terms to Link'); 
		$f->description = 
			$this->_('Enter one per line of: "term=URL", where "term" is the text/phrase you want to automatically link, and "URL" is the URL/path you want it to link to.') . ' ' . 
			$this->_('If your ProcessWire installation runs from a subdirectory, do not include that in the path as it will be prepended automatically.') . ' ' . 
			$this->_('You may also specify a page ID (number) for the URL to determine it automatically at runtime.') . ' ' . 
			$this->_('To automatically expand your term to include other words that start with the same characters, append an asterisk * to the end of your term.'); 
		$f->notes = 
			$this->_('Example: **Hello World=/hello/world/** - This would link the term "Hello World" to /hello/world/.') . " \n" . 
			$this->_('Example: **World*=/hello/world/** - This would link all words starting with "World" (i.e. "World", "Worldwide", etc.) to /hello/world/.') . " \n" . 
			$this->_('Term text is not case sensitive.') . ' ' . 
			$this->_('If preferred, terms may also be specified manually via $config->TextformatterAutolinks = [ "term" => "URL" ]; in your /site/config.php file.');
		$f->rows = 15; 
		$f->val($this->termsString($this->terms));
		$inputfields->add($f); 

		if($languages) {
			// language-specific terms
			$defaultLabel = $f->label; 
			$defaultField = $f; 
			foreach($languages as $language) {
				$label = $defaultLabel . " (" . $language->get('title|name') . ")";
				if($language->isDefault()) {
					$defaultField->label = $label;
					continue; 
				}
				/** @var InputfieldTextarea $f */
				$f = $modules->get('InputfieldTextarea'); 		
				$f->attr('name', "terms$language->id");
				$f->attr('value', $this->termsString($this->get("terms$language->id"))); 
				$f->label = $label;
				$f->rows = 15; 
				$f->collapsed = Inputfield::collapsedBlank;
				$inputfields->add($f); 
			}
		}
	
		/** @var InputfieldTextarea $f */
		$f = $modules->get('InputfieldTextarea'); 
		$f->attr('name', 'xterms'); 
		$value = $this->xterms;
		if(is_array($value)) $value = implode("\n", $value); 
		$f->val($value);
		$f->label = $this->_('Phrases to exclude'); 
		$f->description = $this->_('Sometimes a term appears in a phrase where you do not want it linked. Enter any phrases (containing terms above) where the link should be prevented.'); 
		$f->notes = $this->_('For example, if you wanted the term “contact” linked, but not when it appears in “contact sports”, you would enter “contact sports” here.');
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->add($f); 
		
		/** @var InputfieldInteger $f */
		$f = $modules->get('InputfieldInteger'); 
		$f->attr('name', 'termLimit'); 
		$f->val($this->termLimit);
		$f->label = $this->_('Maximum links per term'); 
		$f->required = true; 
		$f->description = $this->_('Use this option to prevent the same term from being linked too many times in the same block of text.'); 
		$f->notes = $this->_('Specify 1 or higher.');
		$f->columnWidth = 33; 
		$inputfields->add($f); 
		
		/** @var InputfieldInteger $f */
		$f = $modules->get('InputfieldInteger'); 
		$f->attr('name', 'maxLinks'); 
		$f->val($this->maxLinks); 
		$f->label = $this->_('Maximum terms to link'); 
		$f->description = $this->_('Use this option to prevent too many terms from being linked in the same text.'); 
		$f->notes = $this->_('Leave blank (or 0) for no maximum (recommended).'); 
		$f->columnWidth = 33; 
		$inputfields->add($f);

		/** @var InputfieldInteger $f */
		$f = $modules->get('InputfieldInteger');
		$f->attr('name', 'distance'); 
		$f->val($this->distance);
		$f->label = $this->_('Minimum link distance'); 
		$f->description = $this->_('Use this option to prevent the same term from being linked more than once when it appears in close range.'); 
		$f->notes = $this->_('Specify value in number of characters.'); 
		$f->columnWidth = 34; 
		$inputfields->add($f); 

		/** @var InputfieldText $f */
		$f = $modules->get('InputfieldText');
		$f->attr('name', 'allowTags'); 
		$f->val($this->allowTags);
		$f->label = $this->_('Allowed tags whitelist'); 
		$f->description = $this->_('Enter a list of HTML tags (without brackets) that AutoLinks is allowed to generate links within, each separated by a space. When specified, links will only be generated if the terms appear somewhere within one of the given HTML tags. If left blank, terms will be linked within any HTML tags.'); // Allowed tags description
		$f->notes = $this->_('Example: p li h3'); 
		$inputfields->add($f); 

		/** @var InputfieldFieldset $fieldset */
		$fieldset = $modules->get('InputfieldFieldset');
		$fieldset->label = $this->_('Markup for links'); 
		$fieldset->collapsed = Inputfield::collapsedYes; 
		$fieldset->description = $this->_('Variables: {href} is the URL to link and {text} is the anchor text.');

		/** @var InputfieldText $f */
		$f = $modules->get('InputfieldText');
		$f->attr('name', 'linkMarkup'); 
		$f->val($this->linkMarkup);
		$f->label = $this->_('Link Markup (Internal Links)'); 
		$f->columnWidth = 50; 
		$f->description = $this->_('Links that do NOT begin with a scheme/protocol.'); 
		$fieldset->add($f);

		/** @var InputfieldText $f */
		$f = $modules->get('InputfieldText');
		$f->attr('name', 'linkMarkupExt'); 
		$f->val($this->linkMarkupExt);
		$f->label = $this->_('Link Markup (External Links)'); 
		$f->description = $this->_('Links that DO begin with a scheme/protocol like https://.'); 
		$f->columnWidth = 50; 
		$fieldset->add($f); 
		$inputfields->add($fieldset); 
	}
}